name: Publish to PyPI

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g. 0.1.0)'
        required: true
        type: string

jobs:
  # 1. Publish the foundation package (wish-models) first
  publish-models:
    name: Publish wish-models
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "wish-models/.python-version"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      # Update version in pyproject.toml
      - name: Update version in pyproject.toml
        run: |
          sed -i "s/version = \"[^\"]*\"/version = \"${{ inputs.version }}\"/" wish-models/pyproject.toml
          echo "Updated version in wish-models/pyproject.toml to ${{ inputs.version }}"
          grep -m 1 'version = ' wish-models/pyproject.toml

      - name: Build package
        run: cd wish-models ; python -m build

      - name: Publish package to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: cd wish-models ; twine upload dist/*

  # 2. Publish intermediate packages (packages that depend on wish-models)
  publish-dependencies:
    name: Publish wish dependencies
    needs: publish-models
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package:
          - wish-command-execution
          - wish-command-generation
          - wish-log-analysis
          - wish-knowledge-loader

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "${{ matrix.package }}/.python-version"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      # Update version in pyproject.toml
      - name: Update version in pyproject.toml
        run: |
          sed -i "s/version = \"[^\"]*\"/version = \"${{ inputs.version }}\"/" ${{ matrix.package }}/pyproject.toml
          echo "Updated version in ${{ matrix.package }}/pyproject.toml to ${{ inputs.version }}"
          grep -m 1 'version = ' ${{ matrix.package }}/pyproject.toml

      # Update dependency versions
      - name: Update dependency versions
        run: |
          sed -i "s/wish-models>=0.0.1/wish-models==${{ inputs.version }}/g" ${{ matrix.package }}/pyproject.toml
          echo "Updated dependency versions in ${{ matrix.package }}/pyproject.toml"

      - name: Build package
        run: cd ${{ matrix.package }} ; python -m build

      - name: Publish package to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: cd ${{ matrix.package }} ; twine upload dist/*

  # 3. Publish the final package (wish-sh)
  publish-sh:
    name: Publish wish-sh
    needs: publish-dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "wish-sh/.python-version"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      # Update version in pyproject.toml
      - name: Update version in pyproject.toml
        run: |
          sed -i "s/version = \"[^\"]*\"/version = \"${{ inputs.version }}\"/" wish-sh/pyproject.toml
          echo "Updated version in wish-sh/pyproject.toml to ${{ inputs.version }}"
          grep -m 1 'version = ' wish-sh/pyproject.toml

      # Update dependency versions
      - name: Update dependency versions
        run: |
          sed -i "s/wish-models>=0.0.1/wish-models==${{ inputs.version }}/g" wish-sh/pyproject.toml
          sed -i "s/wish-command-execution>=0.0.1/wish-command-execution==${{ inputs.version }}/g" wish-sh/pyproject.toml
          sed -i "s/wish-command-generation>=0.0.1/wish-command-generation==${{ inputs.version }}/g" wish-sh/pyproject.toml
          sed -i "s/wish-log-analysis>=0.0.1/wish-log-analysis==${{ inputs.version }}/g" wish-sh/pyproject.toml
          echo "Updated dependency versions in wish-sh/pyproject.toml"

      - name: Build package
        run: cd wish-sh ; python -m build

      - name: Publish package to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: cd wish-sh ; twine upload dist/*
