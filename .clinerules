# Python アプリケーションプロジェクトガイドライン

## プロジェクト概要

このガイドラインは、Pythonアプリケーションプロジェクト用の一般的な開発ルールを定義しています。
プロジェクト固有の詳細については、各パッケージの `README.md` および `docs/design.md` を参照してください。

## ツール

- 常に uv を使います
  - 依存関係のインストールには `uv sync --dev` を使用します
  - コマンド実行には `uv run` を使用します
- lint には ruff を使います
- 以下のMakeコマンドを使用できます
  - `make test` - すべてのPythonプロジェクトで `uv run pytest` を実行
  - `make lint` - すべてのPythonプロジェクトで `uv run ruff check` を実行
  - `make format` - すべてのPythonプロジェクトで `uv run ruff check --fix` を実行

## Pythonコーディングルール

### 基本方針

- Python 3.13以上を対象としています
- 行の長さとインデントについては `pyproject.toml` の ruff 設定に従ってください
- コードの文字列やコメントは英語で記述します
    - 日本語が残っていることの検出コマンド: `git ls-files | grep ".py" |xargs grep -l "[ぁ-んァ-ンー一-龯]"`

### 型アノテーション

- 型アノテーションを積極的に使用します
- なるべくtypingをインポートせず、`int | None`などの記法を使用します

### モデル

- モデルクラスにはpydantic.BaseModelを使用します

## テストの書き方

### pytestの使用方法

- テストにはpytestを使用します
- クラスのテストはテストクラスを使います
- テストクラス名は`Test*`の形式にします（例: `TestLogging`）
- テスト関数名は`test_*`の形式にします（例: `test_setup_logger_returns_logger`）

### 非同期テスト

- 非同期テストにはpytest-asyncioを使用します
- テスト関数に`@pytest.mark.asyncio`デコレータを付けます

### Factory

- 各クラスに対し factory-boy を使ったファクトリを作成します
- ファクトリ名は`*Factory`の形式にします（例: `UserFactory`）
- テストコードではファクトリを使ってテストデータを作成します

### その他

- 各テストには明確なdocstringを付けて、テストの目的を説明します
- モックが必要な場合は`unittest.mock`を使用します

## Act後の実施事項

- アプリケーション実行ができるなら動作確認をします
- pytestでのリグレッションテストをします

## デバッグ

- あなたはUIを通した動作確認やログを使ったデバッグが苦手です。少々細かすぎる粒度でも良いので、テストケースを追加し、テストを実行することで、自分自身のフィードバックサイクルを作ってください
    - そのためのテストのdocstringには `TODO Remove this test (for debugging)` と書いてください。
