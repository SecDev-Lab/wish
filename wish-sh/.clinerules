# Python アプリケーションプロジェクトガイドライン

## 現在のブランチで達成したいゴール

- wishがTUIで動作する
  - New Wish Mode
  - Wish History Mode

## プロジェクト概要

Pythonアプリケーションプロジェクト用のガイドラインです。
個別プロジェクトの詳細な設計については `docs/design.md` を参照してください。
インストール・動作確認方法は `README.md` を参照してください。

## ツール

- 常に uv を使います
- lint には ruff を使います

## Pythonコーディングルール

### 基本方針

- Python 3.13以上を対象としています
- 行の長さとインデントについては `pyproject.toml` の ruff 設定に従ってください
- コードの文字列やコメントは英語で記述します
    - 日本語が残っていることの検出コマンド: ` grep -r "[ぁ-んァ-ンー一-龯]" src/ tests/`

### 型アノテーション

- 型アノテーションを積極的に使用します
- なるべくtypingをインポートせず、`int | None`などの記法を使用します

### モデル

- モデルクラスにはpydantic.BaseModelを使用します

## テストの書き方

### pytestの使用方法

- テストにはpytestを使用します
- クラスのテストはテストクラスを使います
- テストクラス名は`Test*`の形式にします（例: `TestLogging`）
- テスト関数名は`test_*`の形式にします（例: `test_setup_logger_returns_logger`）

### 非同期テスト

- 非同期テストにはpytest-asyncioを使用します
- テスト関数に`@pytest.mark.asyncio`デコレータを付けます

### Factory

- 各クラスに対し factory-boy を使ったファクトリを作成します
- ファクトリ名は`*Factory`の形式にします（例: `UserFactory`）
- テストコードではファクトリを使ってテストデータを作成します

### その他

- 各テストには明確なdocstringを付けて、テストの目的を説明します
- モックが必要な場合は`unittest.mock`を使用します

## Act後の実施事項

- アプリケーション実行ができるなら動作確認をします
- pytestでのリグレッションテストをします

## デバッグ

- あなたはUIを通した動作確認やログを使ったデバッグが苦手です。少々細かすぎる粒度でも良いので、テストケースを追加し、テストを実行することで、自分自身のフィードバックサイクルを作ってください
    - そのためのテストのdocstringには `TODO Remove this test (for debugging)` と書いてください。
